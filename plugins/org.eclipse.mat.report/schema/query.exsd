<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.mat.api" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.mat.api" id="query" name="Query"/>
      </appInfo>
      <documentation>
         The Memory Analyzer can be extended by Queries. Queries
are pieces of Java Code that implement specific inspections
on the heap dump. Depending on the input parameters,
queries are shown in the Query Drop-Down menu and/or in the
context menu of a heap object.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appInfo>
            <meta.element />
         </appInfo>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="query"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="query">
      <complexType>
         <attribute name="impl" type="string" use="required">
            <annotation>
               <documentation>
                  implementor of &lt;a href=&quot;org/eclipse/mat/query/IQuery.html&quot;&gt;&lt;samp&gt;org.eclipse.mat.query.IQuery&lt;/samp&gt;&lt;/a&gt;
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.mat.query.IQuery"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The value of the impl attribute must represent an implementor of &lt;samp&gt;org.eclipse.mat.query.IQuery&lt;/samp&gt;.
The public fields in the query can be tagged with the &lt;code&gt;@Argument&lt;/code&gt; annotation so they can be filled in by the query wizard. Argument types include
&lt;dl&gt;
&lt;dt&gt;ISnapshot&lt;/dt&gt;
&lt;dd&gt;the snapshot&lt;/dd&gt;
&lt;dt&gt;IHeapObjectArgument&lt;/dt&gt;
&lt;dd&gt;one or more objects&lt;/dd&gt;
&lt;dt&gt;int&lt;/dt&gt;
&lt;dd&gt;a single object - when tagged with &lt;code&gt;@Argument(advice = Advice.HEAP_OBJECT)&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;int[]&lt;/dt&gt;
&lt;dd&gt;multiple objects - when tagged with &lt;code&gt;@Argument(advice = Advice.HEAP_OBJECT)&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;boolean&lt;/dt&gt;
&lt;dd&gt;a flag&lt;/dd&gt;
&lt;/dl&gt;
Queries can be tagged with 
&lt;ul&gt;
&lt;li&gt;@Name&lt;/li&gt;
&lt;li&gt;@Help&lt;/li&gt;
&lt;li&gt;@HelpURL&lt;/li&gt;
&lt;li&gt;@Icon&lt;/li&gt;
&lt;li&gt;@Menu&lt;/li&gt;
&lt;li&gt;@Category&lt;/li&gt;
&lt;li&gt;@CommandName&lt;/li&gt;
&lt;/ul&gt;

These annotations can also be held in an annotations.properties file for ease of translation.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         0.7.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         &lt;p&gt;
Following is an example of a query declaration: 
&lt;pre&gt;
   &lt;extension point=&quot;org.eclipse.mat.report.query&quot;&gt;
      &lt;query impl=&quot;org.eclipse.mat.demo.DemoQuery&quot;/&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
This is the Java code.
&lt;pre&gt;
@CommandName(&quot;DemoQuery&quot;)
public class org.eclipse.mat.demo.DemoQuery implements IQuery
{
    @Argument
    public ISnapshot snapshot;
    
    @Argument
    public boolean myflag;
    
    public IResult execute(IProgressListener listener) throws Exception
    {
        ...
    }
}
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
This is the translatable text in &lt;code&gt;annotations.properties&lt;/code&gt; in the same package.
&lt;pre&gt;
DemoQuery.name = Demonstration Query
DemoQuery.help = A sample query.
DemoQuery.myflag.help = A boolean flag to control the query.
&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         The Memory Analyzer supplies a number of queries itself. Check out the &lt;samp&gt;org.eclipse.mat.inspections&lt;/samp&gt; package for more samples.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2008, 2010 SAP AG and IBM Corporation.&lt;br&gt;
All rights reserved. This program and the accompanying materials are made 
available under the terms of the Eclipse Public License 2.0 which 
accompanies this distribution, and is available at 
&lt;a href=&quot;https://www.eclipse.org/legal/epl-2.0/&quot;&gt;https://www.eclipse.org/legal/epl-2.0/&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
